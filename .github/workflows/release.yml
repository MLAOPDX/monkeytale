# For more information see:
# https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions
# https://github.community/t/how-do-i-specify-job-dependency-running-in-another-workflow/16482

name: Monkeytale Continuous Integration
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# One at a time as each overwrites the other
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  Test: # =====================================================================
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Check-out repo
        uses: actions/checkout@v3
      - name: Install PDM
        uses: pdm-project/setup-pdm@main
        with:
          python-version: "3.10"
          architecture: x64
          prerelease: false
          enable-pep582: true
      - name: Install application with test dependencies
        run: |
          pdm install -dG test
      - name: Run unit tests
        run: |
          pdm run pytest -v ./tests

  Publish: # ==================================================================
    needs: [Test]

    # Skip if Python Semantic Release's internal commit chore(release)
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, 'chore(release)')

    outputs:
      before_release_version: ${{ steps.before_release.outputs.version }}
      after_release_version: ${{ steps.after_release.outputs.version }}

    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    env:
      # Secrets for Python Semantic Release
      REPOSITORY_USERNAME: __token__
      REPOSITORY_PASSWORD: ${{ secrets.PYPI_TOKEN }}

    steps:
      # Full history of commit messages for semantic release
      - name: Check out with full history to determine version bump
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install PDM
        uses: pdm-project/setup-pdm@main
        with:
          python-version: "3.10"
          architecture: x64
          prerelease: false
          enable-pep582: true
      - name: Install Python Semantic Release
        run: |
          pip install packaging
          pip install python-semantic-release
          git config user.name semantic-release
          git config user.email semantic-release@dwlib.com
      - name: Capture version before release
        id: before_release
        run: |
          version=$(semantic-release --current print-version | awk '{print $1}')
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Report version before release
        run: |
          echo ${{steps.before_release.outputs.version}}
      - name: Publish to PyPI if version bumps
        run: semantic-release publish -D repository=pypi
      - name: Capture version after release
        id: after_release
        run: |
          version=$(semantic-release --current print-version | awk '{print $1}')
          echo "version=$version" >> $GITHUB_OUTPUT
      - name: Report version after release
        run: |
          echo ${{steps.after_release.outputs.version}}

  # Confirm publishing to PyPI was successful
  TestDeploy:
    needs: [Publish]

    # Check if there was an actual deployment
    if: needs.Publish.outputs.before_release_version != needs.Publish.outputs.after_release_version

    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Wait for PyPI to expose new version
        run: sleep 30
      - name: Install PDM
        uses: pdm-project/setup-pdm@main
        with:
          python-version: "3.10"
          architecture: x64
          prerelease: false
          enable-pep582: true
      - name: Install published version
        run: |
          pdm init -n
          pdm add monkeytale
      - name: Collect released and published versions
        run: |
          pdm run @ --version | awk '{print $3}' > published_version
          echo ${{needs.Publish.outputs.after_release_version}} > released_version
      - name: Compare released and published versions
        run: |
          echo "Expected v$(cat released_version) and found v$(published_version)"
          diff released_version published_version
